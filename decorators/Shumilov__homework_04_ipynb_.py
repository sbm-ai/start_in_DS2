# -*- coding: utf-8 -*-
"""Копия блокнота "homework_04.ipynb"

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12gOgUP2cj9iwECmt-yB5kcwVDau0NE1F

# Домашнее задание: декораторы

## Импорт библиотек, установка констант
"""

import requests
import time
import re

from random import randint

BOOK_PATH = 'https://www.gutenberg.org/files/2638/2638-0.txt'

from functools import wraps

"""## Задание 1"""

def benchmark(func):
    """
    Декоратор, выводящий время, которое заняло выполнение декорируемой функции
    """
    @wraps(func)

    def wrapper(*args, **kwargs):
      start = time.perf_counter()
      result = func(*args, **kwargs)
      end = time.perf_counter()
      print(f'{func.__name__} потребовалось {end - start:.6f} секунд')
      return result

    return wrapper

"""## Задание 2"""

def logging(func):
    """
    Декоратор, который выводит параметры с которыми была вызвана функция
    """
    @wraps(func)

    def wrapper(*args, **kwargs):
      arg_str = ', '.join(repr(arg) for arg in args)
      if arg_str !='':
        print(f'{func.__name__}({arg_str})')
      else:
        print(f'{func.__name__}')
      #return result

    return wrapper

"""## Задание 3"""

def counter(func):
    """
    Декоратор, считающий и выводящий количество вызовов декорируемой функции
    """

    def wrapper(*args, **kwargs):
        ...
    ...
    return wrapper

def counter(func):
    def wrapper(*args, **kwargs):
        wrapper.count += 1
        return func(*args, **kwargs)

    wrapper.count = 0
    return wrapper

@counter
def f():
    print("Hello")

f()
f()
f()
print(f.count)

"""## Задание 4"""

def memo(func):
  """
  Декоратор, запоминающий результаты исполнения функции func, чьи аргументы args должны быть хешируемыми
  """
  cache = {}

  def fmemo(*args):
    ...

  fmemo.cache = cache
  return fmemo

def memo(func):
  """
  Декоратор, запоминающий результаты исполнения функции func, чьи аргументы args должны быть хешируемыми
  """
  cache = {}

  def fmemo(*args):
    return func(*args)

  fmemo.cache = cache
  return fmemo

@memo
def hi(name):
  return f'Привет,{name}'

print(hi('Лена'))

@benchmark
def get_webpage():
  import requests
  webpage = requests.get('https://stepic.org')

get_webpage()

@logging
def get_webpage1():
  import requests
  webpage1 = requests.get('https://stepic.org')

get_webpage1()

@logging
def countdown(n, step):
  while n > 0:
    n -= step

countdown(10**5, 2)
countdown(10**8, 5)

@benchmark
def countdown(n, step):
  while n > 0:
    n -= step

countdown(10**5, 2)
countdown(10**8, 5)

@benchmark
@logging
def countdown(n, step):
  while n > 0:
    n -= step

countdown(10**5, 2)
countdown(10**8, 5)

@memo
@benchmark
@logging
def factorial(n):
  return 1 if n < 2 else n*factorial(n-1)

print(f'10! = {factorial(10)}')

import functools

@functools.lru_cache()
@benchmark
@logging
def fibonacci(n):
  if n < 2:
    return n
  return fibonacci(n-2) + fibonacci(n-1)

fibonacci(5)

"""## Тестирование"""

@counter
@logging
@benchmark
def get_webpage():
  import requests
  webpage = requests.get('https://stepic.org')

get_webpage()


def word_count(word, url=BOOK_PATH):
    """
    Функция для посчета указанного слова на html-странице
    """

    # отправляем запрос в библиотеку Gutenberg и забираем текст
    raw = requests.get(url).text

    # заменяем в тексте все небуквенные символы на пробелы
    processed_book = re.sub('[\W]+' , ' ', raw).lower()

    # считаем
    cnt = len(re.findall(word.lower(), processed_book))

    return f"Cлово {word} встречается {cnt} раз"

print(word_count('whole'))

def fib(n):
    if n < 2:
        return n
    return fib(n-2) + fib(n-1)

# измеряем время выполнения
@benchmark
def fib(n):
    if n < 2:
        return n
    return fib(n-2) + fib(n-1)
fib(5)

@memo
def fib(n):
    if n < 2:
        return n
    return fib(n-2) + fib(n-1)

# измеряем время выполнения
@memo
@benchmark
def fib(n):
    if n < 2:
        return n
    return fib(n-2) + fib(n-1)

fib(5)